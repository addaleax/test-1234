diff --git a/lib/install.js b/lib/install.js
index 4c3d0def78a7..b2b02382d5f7 100644
--- a/lib/install.js
+++ b/lib/install.js
@@ -492,6 +492,7 @@ Installer.prototype.executeActions = function (cb) {
 
   var self = this
   chain(steps, function (er) {
+    if (er) console.log('chain er executeActions -> ', er);
     if (!er || self.rollback) {
       rimraf(staging, function () { cb(er) })
     } else {
diff --git a/lib/install/action/extract.js b/lib/install/action/extract.js
index 60aae036c28c..4b42cf198d0a 100644
--- a/lib/install/action/extract.js
+++ b/lib/install/action/extract.js
@@ -17,17 +17,20 @@ module.exports = function (top, buildpath, pkg, log, next) {
   var up = npm.config.get('unsafe-perm')
   var user = up ? null : npm.config.get('user')
   var group = up ? null : npm.config.get('group')
+  console.log('action/extract: ug = ', user, group)
   cache.unpack(pkg.package.name, pkg.package.version, buildpath, null, null, user, group,
         andUpdatePackageJson(pkg, buildpath, andStageBundledChildren(pkg, buildpath, log, next)))
 }
 
 function andUpdatePackageJson (pkg, buildpath, next) {
+  console.log('andUpdatePackageJson', pkg, buildpath)
   return iferr(next, function () {
     updatePackageJson(pkg, buildpath, next)
   })
 }
 
 function andStageBundledChildren (pkg, buildpath, log, next) {
+  console.log('andStageBundledChildren', pkg, buildpath)
   var staging = path.resolve(buildpath, '..')
   return iferr(next, function () {
     for (var i = 0; i < pkg.children.length; ++i) {
diff --git a/lib/install/update-package-json.js b/lib/install/update-package-json.js
index eee530c3cd80..3132a1e677c4 100644
--- a/lib/install/update-package-json.js
+++ b/lib/install/update-package-json.js
@@ -42,5 +42,6 @@ module.exports = function (mod, buildpath, next) {
 
   var data = JSON.stringify(sortedObject(pkg), null, 2) + '\n'
 
+  console.log('write file atomic in update-package-json', path.resolve(buildpath, 'package.json'))
   writeFileAtomic(path.resolve(buildpath, 'package.json'), data, next)
 }
diff --git a/lib/utils/tar.js b/lib/utils/tar.js
index f580c8e05dee..a6d62304987d 100644
--- a/lib/utils/tar.js
+++ b/lib/utils/tar.js
@@ -363,6 +363,7 @@ function gunzTarPerm (tarball, target, dMode, fMode, uid, gid, cb_) {
     return true
   }
 
+  console.log('extractOpts = ', extractOpts)
   fst
     .on('error', function (er) {
       if (er) log.error('tar.unpack', 'error reading ' + tarball)
diff --git a/node_modules/write-file-atomic/index.js b/node_modules/write-file-atomic/index.js
index 519aacad9880..3b82ea44c696 100644
--- a/node_modules/write-file-atomic/index.js
+++ b/node_modules/write-file-atomic/index.js
@@ -28,6 +28,7 @@ module.exports = function writeFile (filename, data, options, callback) {
     // Either mode or chown is not explicitly set
     // Default behavior is to copy it from original file
     return fs.stat(filename, function (err, stats) {
+      console.log('wfa stat()â€™ed', filename, 'and got', stats);
       options = extend({}, options)
       if (!err && stats && !options.mode) {
         options.mode = stats.mode
